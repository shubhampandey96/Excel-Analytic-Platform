// excel-analytics-backend/server.js
const express = require('express');
const mongoose = require('mongoose');
const dotenv = require('dotenv');
const cors = require('cors');
const http = require('http');
const multer = require('multer'); // For file uploads
const initializeSocket = require('./socket'); // For Socket.IO setup
const connectDB = require("./config/database.js"); // For MongoDB connection

// Import your route modules
const authRoutes = require('./routes/authRoutes');
const fileRoutes = require('./routes/fileRoutes'); // Assuming you'll have a fileRoutes.js
const historyRoutes = require('./routes/historyRoutes');
// const aiRoutes = require('./routes/aiRoutes'); // This will be replaced by direct controller call

// Import your middleware
const authMiddleware = require('./middleware/authMiddleware');
const historyLoggerMiddleware = require('./middleware/historyLogger');

// Import controllers (specifically for setting Socket.IO and direct use)
const fileController = require('./controllers/fileController');
const aiController = require('./controllers/aiController'); // <-- ADD THIS LINE

dotenv.config(); // Load environment variables from .env file

const app = express();

// Middleware setup
app.use(cors()); // Enable Cross-Origin Resource Sharing
app.use(express.json()); // Parse JSON request bodies
connectDB(); // Connect to MongoDB

// Create HTTP server and initialize Socket.IO
const server = http.createServer(app);
const io = initializeSocket(server); // Capture the io instance returned by initializeSocket

// Pass the Socket.IO instance to the controllers that need it
fileController.setSocketIO(io);
aiController.setSocketIO(io); // <-- ADD THIS LINE

// --- API Routes ---

// Test API Route (public)
app.get('/api/test', (req, res) => {
    res.status(200).json({ message: 'API is working properly!' });
});

// Authentication Routes (handled by authRoutes.js)
app.use('/api/auth', authRoutes);

// File Upload API with Authentication
const upload = multer({ storage: multer.memoryStorage() }); // Multer setup for in-memory storage
app.post('/api/files/upload', authMiddleware, upload.single('file'), fileController.uploadFile);

// You can add more file routes here if you implement getFiles, deleteFile etc.
// app.use('/api/files', authMiddleware, fileRoutes); // If you create a dedicated fileRoutes.js

// History Routes (protected by authMiddleware and logged by historyLoggerMiddleware)
app.use('/api/history', authMiddleware, historyLoggerMiddleware, historyRoutes);

// AI Integration Route (for Google Gemini AI)
// This endpoint will trigger the AI analysis
app.post('/api/ai/analyze', authMiddleware, aiController.analyzeData); // <-- ADD THIS LINE

// --- Error Handling (Optional, but good practice) ---
app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).send('Something broke!');
});

// --- Server Start ---
mongoose.connection.once('open', () => console.log('âœ… MongoDB Connected Successfully'));

const PORT = process.env.PORT || 5000;
server.listen(PORT, () => {
    console.log(`ðŸš€ Server running on port ${PORT}`);
});